"""
Django settings for Agora project.

Generated by 'django-admin startproject' using Django 1.10.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

REDIS_URL = "redis://:@localhost:6379/0"
# REDIS_URL = "redis://:agoraagora@localhost:6379/0"

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "54zqn!@y)04)w5pth*yuln2p+6j(ohdl_3bk7*6^s)gbmtzh11"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

DATA_UPLOAD_MAX_MEMORY_SIZE = 20971520
FILE_UPLOAD_PERMISSIONS = 0o644


# Application definition

INSTALLED_APPS = [
    'channels',
    'daphne',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    #    'django_extensions',
    "django_markdown2",
    ## For SAML2 integration: not used
    'django_saml2_pro_auth',
    "nested_admin",
    "rest_framework",
    "peer_account",
    "peer_course",
    "peer_home",
    "django_cron",
    "peer_grade",
    "peer_lecture",
    ## For weblog integration: not used
    # 'zinnia',
    # 'django_comments',
    # 'mptt',
    # 'tagging',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "request_logging.middleware.LoggingMiddleware",
]

ROOT_URLCONF = "agora.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.i18n",
                "zinnia.context_processors.version",  # Optional
            ]
        },
    }
]

WSGI_APPLICATION = "agora.wsgi.application"
SITE_ID = 1


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    #'mysql': {
    #    'ENGINE': 'django.db.backends.mysql',
    #    'NAME': 'mta',
    #    'USER': 'root',
    # 	'PASSWORD': 'soldrecT',
    # 	'HOST': '127.0.0.1',
    # 	'PORT': '11729'
    #   },
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

FIXTURE_DIRS = ["peer_home/fixtures/"]

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = "en-ca"

TIME_ZONE = "America/Vancouver"

USE_I18N = True

USE_L10N = False

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR + STATIC_URL
STATIC_DICT = {
    "peer_home": BASE_DIR + "/peer_home/static",
    #'peer_auth': BASE_DIR + '/peer_auth/static',
}


# For serving files
ENV_PATH = os.path.abspath(os.path.dirname(__file__))
MEDIA_ROOT = os.path.join(ENV_PATH, "media/")

MEDIA_URL = "/media/"

# For django_cron
# needs to run 'python3 manage.py runcrons'
# http://django-cron.readthedocs.io/en/latest/installation.html
CRON_CLASSES = [
    "peer_assignment.cron.ReleaseAssignment",
    # "peer_assignment.cron.ExportAssignment",
    "peer_assignment.cron.StopTAtimer"
    # ...
]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "base": {
            "format": "## %(levelname)s - [%(asctime)s] - (%(module)s): %(message)s"
        }
    },
    "handlers": {
        "default_log": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "agora", "logs", "django.log"),
            "formatter": "base",
        },
        "events_log": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "agora", "logs", "events.log"),
            "formatter": "base",
        },
        "debug_log": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "agora", "logs", "debug.log"),
            "formatter": "base",
        },
        "requests_log": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "agora", "logs", "requests.log"),
            "formatter": "base",
        },
    },
    "loggers": {
        "django": {"handlers": ["default_log"], "level": "INFO", "propagate": True},
        "django.request": {
            "handlers": ["default_log", "requests_log"],
            "level": "INFO",
            "propagate": True,
        },
        "mta.events": {
            "handlers": ["default_log", "events_log"],
            "level": "INFO",
            "propagate": True,
        },
        "mta.debug": {
            "handlers": ["default_log", "debug_log"],
            "level": "INFO",
            "propagate": True,
        },
    },
}

## SAML2 authentication: not used
SAML2_INTEGRATION_ENABLED = False
if SAML2_INTEGRATION_ENABLED:
    LOGIN_URL = "account:login" if DEBUG else "account:saml_login"
    from .saml_settings import *
else:
    LOGIN_URL = "account:login"


###### Application specific settings

# If set to True, the submission grades will be calculated
# component-wise, i.e. sum of medians, rather than median of sums
COMPONENTWISE_GRADE = False

## setting removed and moved to the assignment review settings: `AssignmentWithReviews.ta_reviews_per_question`
# If set to True, different TA reviews can be assigned for question
# ASSIGN_TA_REVIEWS_PER_QUESTION = False

# Is the signup page enabled?
# i.e. can students signup freely or do the course staff want to handle it
SIGNUP_ENABLED = True

## setting removed and moved to the course settings: `Course.can_tas_see_reviews`
# If set to False, the TAs can't see student reviews: see grader name, grade, or access review page
# CAN_TA_SEE_ST_REVIEWS = True

# supported languages for syntax highlighting
LANGUAGE_EXT_TO_NAME = {
    "cpp": "cpp",
    "c": "c",
    "clike": "clike",
    "js": "javascript",
    "txt": "text",
    "java": "java",
    "py": "python",
    "m": "matlab",
    "lua": "lua",
    "jl": "julia",
    "json": "json",
    "php": "php",
    "r": "r",
    "scala": "scala",
}

# Django Channels

ASGI_APPLICATION = 'peer_lecture.routing.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [REDIS_URL],
            "capacity": 1000,
            "group_expiry": 7200,
        },
    },
}